1. 사용자 입력
    └─→ MCP Message Parser
          └─→ MCPRequest 생성

2. RouterAgent (중앙 이벤트 딜리게이터)
    ├─→ ModeSelector
    │    ├─ 판단: tool 기반 실행인지 plan 기반 실행인지 결정
    │    ├─ "tool" 선택 시:
    │    │    └─→ ToolSelector (LocalLLMSelector)
    │    │          └─→ (plugin description 기반 유사도 검색)
    │    │          └─→ 최종 tool_name 선택
    │    │          └─→ PluginManager.run(tool_name)
    │    │                 └─→ 선택된 Plugin 실행 (QA / Chat / Code / Tool ...)
    │    │                        ├─→ LLM API / Tokenizer / GPU / 외부 기능 등 활용
    │    │                 └─→ 결과 → Validator → MCPResponse
    │
    │    └─ "plan" 선택 시:
    │         └─→ PlanningAgent
    │               └─→ ExecutionPlan 생성 (예: [summarize, refine, respond])
    │               └─→ step-by-step RouterAgent에 plan 전달
    │                       └─ 각 step별 ToolSelector → PluginManager 실행
    │                       └─ 실행 결과 → Validator → 다음 step or MCPResponse


+-------------------+       +-------------------+       +--------------------+
|   PlanningAgent   | ---> |   ExecutionAgent   | ---> | execution_results  |
| (id & dag 설정)  |       |  (id 유지)         |       | {id: 결과 AgentMsg} |
+-------------------+       +-------------------+       +--------------------+

     |                                                          ^
     |                                                          |
     +--------------------<-------------------------------------+
                           다음 Planning 시 dag 로 이전 결과 조회


3. PluginManager (Plugin as Broker)
    ├─ 내부적으로 BaseAgent들을 lazy-load / LRU 관리
    ├─ Plugin 종류:
    │    ├─ Plugin: QA (LLM 기반)
    │    ├─ Plugin: Chat (LLM 기반)
    │    ├─ Plugin: Code (PyTorch 모델 사용)
    │    ├─ Plugin: Tool (기타 기능)
    └─ 각 Plugin은 다음 자원을 활용할 수 있음:
         ├─ LLM API
         ├─ Tokenizer
         ├─ Local GPU
         └─ 외부 기능 (e.g., web API, DB 등)
